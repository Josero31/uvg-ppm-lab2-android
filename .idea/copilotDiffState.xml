<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lab2/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lab2/MainActivity.kt" />
              <option name="originalContent" value="package com.example.lab2 // Define el paquete donde se encuentra este archivo&#10;&#10;// Importaciones necesarias para la actividad y componentes de Jetpack Compose&#10;import android.annotation.SuppressLint // Permite suprimir advertencias específicas del compilador&#10;import android.os.Bundle // Proporciona la clase Bundle para pasar datos entre actividades&#10;import androidx.activity.ComponentActivity // Clase base para actividades que usan Compose&#10;import androidx.activity.compose.setContent // Permite definir el contenido de la actividad usando Compose&#10;import androidx.activity.enableEdgeToEdge // Habilita el modo edge-to-edge en la actividad&#10;import androidx.compose.foundation.layout.fillMaxSize // Modificador para que el componente ocupe todo el espacio disponible&#10;import androidx.compose.foundation.layout.padding // Modificador para agregar espacio alrededor de un componente&#10;import androidx.compose.material3.Scaffold // Componente de estructura básica para pantallas (barra superior, contenido, etc.)&#10;import androidx.compose.material3.Text // Componente para mostrar texto en pantalla&#10;import androidx.compose.runtime.Composable // Indica que una función es composable (puede usarse en Compose)&#10;import androidx.compose.ui.Modifier // Permite modificar el comportamiento y apariencia de los componentes&#10;import androidx.compose.ui.tooling.preview.Preview // Permite previsualizar composables en el editor&#10;import com.example.lab2.ui.theme.Lab2Theme // Importa el tema personalizado de la aplicación&#10;import androidx.compose.ui.graphics.Color // Importa el manejo de colores&#10;import androidx.compose.foundation.background // Importa el modificador de fondo&#10;import androidx.compose.ui.Alignment // Importa alineación para centrar el texto&#10;import androidx.compose.foundation.layout.fillMaxWidth // Importa modificador para ocupar todo el ancho&#10;import androidx.compose.foundation.layout.wrapContentWidth // Importa modificador para centrar contenido&#10;import androidx.compose.ui.unit.dp // Importa la unidad dp para el padding&#10;&#10;/**&#10; * Actividad principal de la aplicación.&#10; * Hereda de ComponentActivity para usar Jetpack Compose.&#10; */&#10;class MainActivity : ComponentActivity() {&#10;    /**&#10;     * Método que se llama cuando la actividad es creada.&#10;     * @param savedInstanceState Estado guardado de la actividad (si existe).&#10;     */&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState) // Llama al método de la clase padre&#10;        enableEdgeToEdge() // Habilita el modo edge-to-edge para la interfaz&#10;        setContent { // Define el contenido de la actividad usando Compose&#10;            Lab2Theme { // Aplica el tema personalizado a la interfaz&#10;                AppContent() // Llama al composable principal que contiene la UI&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable principal que define la estructura de la interfaz de usuario.&#10; * Utiliza Scaffold para organizar la pantalla y llama al composable Greeting.&#10; */&#10;@Composable&#10;fun AppContent() {&#10;    Scaffold(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.Cyan) // Aplica fondo celeste a toda la pantalla&#10;    ) { innerPadding -&gt; // innerPadding es el espacio interno que Scaffold proporciona a su contenido&#10;        Greeting( // Llama al composable Greeting para mostrar el saludo&#10;            name = &quot;Jose&quot;, // Parámetro que indica el nombre a mostrar en el saludo&#10;            modifier = Modifier&#10;                .padding(innerPadding) // Aplica el padding proporcionado por Scaffold&#10;                .fillMaxWidth()&#10;                .wrapContentWidth(Alignment.CenterHorizontally) // Centra el texto horizontalmente&#10;                .padding(top = 64.dp) // Baja el texto desde la parte superior&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra un mensaje de saludo en pantalla.&#10; * @param name Nombre de la persona a saludar.&#10; * @param modifier Modificador para aplicar estilos o comportamientos al componente.&#10; */&#10;@Composable&#10;fun Greeting(&#10;    name: String, // Nombre que se mostrará en el saludo&#10;    @SuppressLint(&quot;ModifierParameter&quot;) modifier: Modifier = Modifier // Modificador opcional para el componente&#10;) {&#10;    Text( // Componente que muestra texto en pantalla&#10;        text = &quot;Hello $name!&quot;, // Texto que se mostrará, incluyendo el nombre recibido&#10;        modifier = modifier // Aplica el modificador recibido como parámetro&#10;    )&#10;}&#10;&#10;/**&#10; * Composable para previsualizar la interfaz en el editor de Android Studio.&#10; * Permite ver cómo se verá la pantalla sin ejecutar la app.&#10; */&#10;@Preview(showBackground = true) // Indica que se debe mostrar el fondo en la previsualización&#10;@Composable&#10;fun GreetingPreview() {&#10;    Lab2Theme { // Aplica el tema personalizado en la previsualización&#10;        AppContent() // Muestra el contenido principal de la app&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.lab2 // Define el paquete donde se encuentra este archivo&#10;&#10;// Importaciones necesarias para la actividad y componentes de Jetpack Compose&#10;import android.annotation.SuppressLint // Permite suprimir advertencias específicas del compilador&#10;import android.os.Bundle // Proporciona la clase Bundle para pasar datos entre actividades&#10;import androidx.activity.ComponentActivity // Clase base para actividades que usan Compose&#10;import androidx.activity.compose.setContent // Permite definir el contenido de la actividad usando Compose&#10;import androidx.activity.enableEdgeToEdge // Habilita el modo edge-to-edge en la actividad&#10;import androidx.compose.foundation.layout.fillMaxSize // Modificador para que el componente ocupe todo el espacio disponible&#10;import androidx.compose.foundation.layout.padding // Modificador para agregar espacio alrededor de un componente&#10;import androidx.compose.material3.Scaffold // Componente de estructura básica para pantallas (barra superior, contenido, etc.)&#10;import androidx.compose.material3.Text // Componente para mostrar texto en pantalla&#10;import androidx.compose.runtime.Composable // Indica que una función es composable (puede usarse en Compose)&#10;import androidx.compose.ui.Modifier // Permite modificar el comportamiento y apariencia de los componentes&#10;import androidx.compose.ui.tooling.preview.Preview // Permite previsualizar composables en el editor&#10;import com.example.lab2.ui.theme.Lab2Theme // Importa el tema personalizado de la aplicación&#10;import androidx.compose.ui.graphics.Color // Importa el manejo de colores&#10;import androidx.compose.foundation.background // Importa el modificador de fondo&#10;import androidx.compose.ui.Alignment // Importa alineación para centrar el texto&#10;import androidx.compose.foundation.layout.fillMaxWidth // Importa modificador para ocupar todo el ancho&#10;import androidx.compose.foundation.layout.wrapContentWidth // Importa modificador para centrar contenido&#10;import androidx.compose.ui.unit.dp // Importa la unidad dp para el padding&#10;import androidx.compose.foundation.layout.Box // Importa Box para envolver el contenido&#10;&#10;/**&#10; * Actividad principal de la aplicación.&#10; * Hereda de ComponentActivity para usar Jetpack Compose.&#10; */&#10;class MainActivity : ComponentActivity() {&#10;    /**&#10;     * Método que se llama cuando la actividad es creada.&#10;     * @param savedInstanceState Estado guardado de la actividad (si existe).&#10;     */&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState) // Llama al método de la clase padre&#10;        enableEdgeToEdge() // Habilita el modo edge-to-edge para la interfaz&#10;        setContent { // Define el contenido de la actividad usando Compose&#10;            Lab2Theme { // Aplica el tema personalizado a la interfaz&#10;                AppContent() // Llama al composable principal que contiene la UI&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable principal que define la estructura de la interfaz de usuario.&#10; * Utiliza Scaffold para organizar la pantalla y llama al composable Greeting.&#10; */&#10;@Composable&#10;fun AppContent() {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.Cyan) // Fondo celeste para toda la pantalla&#10;    ) {&#10;        Scaffold(&#10;            containerColor = Color.Transparent, // Hace el fondo del Scaffold transparente&#10;        ) { innerPadding -&gt; // innerPadding es el espacio interno que Scaffold proporciona a su contenido&#10;            Greeting( // Llama al composable Greeting para mostrar el saludo&#10;                name = &quot;Jose&quot;, // Parámetro que indica el nombre a mostrar en el saludo&#10;                modifier = Modifier&#10;                    .padding(innerPadding) // Aplica el padding proporcionado por Scaffold&#10;                    .fillMaxWidth()&#10;                    .wrapContentWidth(Alignment.CenterHorizontally) // Centra el texto horizontalmente&#10;                    .padding(top = 64.dp) // Baja el texto desde la parte superior&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra un mensaje de saludo en pantalla.&#10; * @param name Nombre de la persona a saludar.&#10; * @param modifier Modificador para aplicar estilos o comportamientos al componente.&#10; */&#10;@Composable&#10;fun Greeting(&#10;    name: String, // Nombre que se mostrará en el saludo&#10;    @SuppressLint(&quot;ModifierParameter&quot;) modifier: Modifier = Modifier // Modificador opcional para el componente&#10;) {&#10;    Text( // Componente que muestra texto en pantalla&#10;        text = &quot;Hello $name!&quot;, // Texto que se mostrará, incluyendo el nombre recibido&#10;        modifier = modifier // Aplica el modificador recibido como parámetro&#10;    )&#10;}&#10;&#10;/**&#10; * Composable para previsualizar la interfaz en el editor de Android Studio.&#10; * Permite ver cómo se verá la pantalla sin ejecutar la app.&#10; */&#10;@Preview(showBackground = true) // Indica que se debe mostrar el fondo en la previsualización&#10;@Composable&#10;fun GreetingPreview() {&#10;    Lab2Theme { // Aplica el tema personalizado en la previsualización&#10;        AppContent() // Muestra el contenido principal de la app&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>