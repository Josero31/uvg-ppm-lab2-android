<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lab2/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lab2/MainActivity.kt" />
              <option name="originalContent" value="package com.example.lab2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.example.lab2.ui.theme.Lab2Theme&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Actividad principal de la aplicación.&#10; *&#10; * Esta clase inicializa la interfaz de usuario usando Jetpack Compose y aplica el tema personalizado.&#10; * El fondo de la pantalla se fuerza a celeste usando un Box raíz.&#10; */&#10;class MainActivity : ComponentActivity() {&#10;    /**&#10;     * Método que se llama al crear la actividad.&#10;     *&#10;     * @param savedInstanceState Estado guardado de la actividad, si existe.&#10;     */&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            Lab2Theme {&#10;                /**&#10;                 * Box raíz que fuerza el fondo celeste en toda la pantalla.&#10;                 */&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .background(Color.Cyan) // ¡Fondo celeste garantizado!&#10;                ) {&#10;                    /**&#10;                     * Composable principal que contiene la lógica de la pantalla.&#10;                     */&#10;                    AppContent()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra la pantalla principal de la aplicación.&#10; *&#10; * Presenta un botón centrado en la parte superior. Al presionarlo, el botón es reemplazado por un saludo&#10; * en la misma posición y se muestra un mensaje tipo snackbar.&#10; *&#10; * Variables internas:&#10; * - snackbarHostState: Estado para mostrar mensajes snackbar.&#10; * - scope: Corutina para lanzar tareas asíncronas.&#10; * - showText: Estado booleano que determina si se muestra el saludo o el botón.&#10; *&#10; * Flujo de interacción:&#10; * - Estado inicial: Se muestra el botón &quot;Presiona el botón&quot;.&#10; * - Al presionar el botón, se muestra el saludo y el botón &quot;Volver&quot; en la misma posición.&#10; * - Al presionar &quot;Volver&quot;, se regresa al estado inicial mostrando el botón original.&#10; */&#10;@Composable&#10;fun AppContent() {&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scope = rememberCoroutineScope()&#10;    var showText by remember { mutableStateOf(false) }&#10;&#10;    /**&#10;     * Scaffold que organiza la estructura visual y permite mostrar snackbars.&#10;     * Se configura con fondo transparente para que el color celeste del Box raíz sea visible.&#10;     */&#10;    Scaffold(&#10;        modifier = Modifier.background(Color.Transparent), // Fondo transparente&#10;        containerColor = Color.Transparent, // Fondo transparente&#10;        snackbarHost = { SnackbarHost(snackbarHostState) }&#10;    ) { innerPadding -&gt;&#10;        /**&#10;         * Box centrado en la parte superior para mostrar el botón o el saludo.&#10;         */&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize(),&#10;            contentAlignment = Alignment.TopCenter&#10;        ) {&#10;            if (showText) {&#10;                /**&#10;                 * Muestra el saludo y el botón &quot;Volver&quot; si showText es true.&#10;                 *&#10;                 * El botón &quot;Volver&quot; permite regresar al estado inicial mostrando el botón original.&#10;                 */&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.padding(top = 64.dp)&#10;                ) {&#10;                    Greeting(&#10;                        name = &quot;Jose&quot;,&#10;                        modifier = Modifier&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    /**&#10;                     * Botón que, al ser presionado, regresa al estado inicial (mostrando el botón original).&#10;                     *&#10;                     * @see showText Estado que controla la visibilidad del saludo y el botón.&#10;                     */&#10;                    Button(&#10;                        onClick = { showText = false },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Color(0xFF0D47A1), // Azul marino&#10;                            contentColor = Color.White // Texto blanco&#10;                        )&#10;                    ) {&#10;                        Text(&quot;Volver&quot;)&#10;                    }&#10;                }&#10;            } else {&#10;                /**&#10;                 * Muestra el botón si showText es false.&#10;                 * El botón tiene color azul marino y texto blanco.&#10;                 * Al presionarlo, muestra el saludo y un snackbar.&#10;                 *&#10;                 * @see showText Estado que controla la visibilidad del saludo y el botón.&#10;                 * @see snackbarHostState Estado para mostrar el mensaje snackbar.&#10;                 */&#10;                Button(&#10;                    onClick = {&#10;                        showText = true&#10;                        scope.launch {&#10;                            snackbarHostState.showSnackbar(&quot;¡Hola desde el botón!&quot;)&#10;                        }&#10;                    },&#10;                    modifier = Modifier.padding(top = 64.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Color(0xFF0D47A1), // Azul marino&#10;                        contentColor = Color.White // Texto blanco&#10;                    )&#10;                ) {&#10;                    Text(&quot;Presiona el botón&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra un mensaje de saludo en pantalla.&#10; *&#10; * @param name Nombre de la persona a saludar.&#10; * @param modifier Modificador para aplicar estilos o comportamientos al componente.&#10; */&#10;@Composable&#10;fun Greeting(&#10;    name: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Text(&#10;        text = &quot;\n¡Hola, soy $name y este es mi lab #2!\n\n&quot; +&#10;               &quot;En este lab se muestra un botón que, al ser presionado, da un saludo y un snackbar para volver al estado inicial.&quot;,&#10;        modifier = modifier&#10;            .padding(horizontal = 24.dp, vertical = 16.dp), // Más espacio alrededor del texto&#10;        color = Color.Black,&#10;        fontSize = MaterialTheme.typography.titleMedium.fontSize, // Fuente más grande&#10;        lineHeight = 28.sp // Más espacio entre líneas&#10;    )&#10;}&#10;&#10;/**&#10; * Composable para previsualizar la interfaz en el editor de Android Studio.&#10; * Permite ver cómo se verá la pantalla sin ejecutar la app.&#10; */&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    Lab2Theme {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Cyan)&#10;        ) {&#10;            AppContent()&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.lab2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.lab2.ui.theme.Lab2Theme&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Actividad principal de la aplicación.&#10; *&#10; * Esta clase inicializa la interfaz de usuario usando Jetpack Compose y aplica el tema personalizado.&#10; * El fondo de la pantalla se fuerza a celeste usando un Box raíz.&#10; */&#10;class MainActivity : ComponentActivity() {&#10;    /**&#10;     * Método que se llama al crear la actividad.&#10;     *&#10;     * @param savedInstanceState Estado guardado de la actividad, si existe.&#10;     */&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            Lab2Theme {&#10;                /**&#10;                 * Box raíz que fuerza el fondo celeste en toda la pantalla.&#10;                 */&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .background(Color.Cyan) // ¡Fondo celeste garantizado!&#10;                ) {&#10;                    /**&#10;                     * Composable principal que contiene la lógica de la pantalla.&#10;                     */&#10;                    AppContent()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra la pantalla principal de la aplicación.&#10; *&#10; * Presenta un botón centrado en la parte superior. Al presionarlo, el botón es reemplazado por un saludo&#10; * en la misma posición y se muestra un mensaje tipo snackbar.&#10; *&#10; * Variables internas:&#10; * - snackbarHostState: Estado para mostrar mensajes snackbar.&#10; * - scope: Corutina para lanzar tareas asíncronas.&#10; * - showText: Estado booleano que determina si se muestra el saludo o el botón.&#10; *&#10; * Flujo de interacción:&#10; * - Estado inicial: Se muestra el botón &quot;Presiona el botón&quot;.&#10; * - Al presionar el botón, se muestra el saludo y el botón &quot;Volver&quot; en la misma posición.&#10; * - Al presionar &quot;Volver&quot;, se regresa al estado inicial mostrando el botón original.&#10; */&#10;@Composable&#10;fun AppContent() {&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scope = rememberCoroutineScope()&#10;    var showText by remember { mutableStateOf(false) }&#10;&#10;    /**&#10;     * Scaffold que organiza la estructura visual y permite mostrar snackbars.&#10;     * Se configura con fondo transparente para que el color celeste del Box raíz sea visible.&#10;     */&#10;    Scaffold(&#10;        modifier = Modifier.background(Color.Transparent), // Fondo transparente&#10;        containerColor = Color.Transparent, // Fondo transparente&#10;        snackbarHost = { SnackbarHost(snackbarHostState) }&#10;    ) { innerPadding -&gt;&#10;        /**&#10;         * Box centrado en la parte superior para mostrar el botón o el saludo.&#10;         */&#10;        Box(&#10;            modifier = Modifier&#10;                .padding(innerPadding)&#10;                .fillMaxSize(),&#10;            contentAlignment = Alignment.TopCenter&#10;        ) {&#10;            if (showText) {&#10;                /**&#10;                 * Muestra el saludo y el botón &quot;Volver&quot; si showText es true.&#10;                 *&#10;                 * El botón &quot;Volver&quot; permite regresar al estado inicial mostrando el botón original.&#10;                 */&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.padding(top = 64.dp)&#10;                ) {&#10;                    Greeting(&#10;                        name = &quot;Jose&quot;,&#10;                        modifier = Modifier&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    /**&#10;                     * Botón que, al ser presionado, regresa al estado inicial (mostrando el botón original).&#10;                     *&#10;                     * @see showText Estado que controla la visibilidad del saludo y el botón.&#10;                     */&#10;                    Button(&#10;                        onClick = { showText = false },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Color(0xFF0D47A1), // Azul marino&#10;                            contentColor = Color.White // Texto blanco&#10;                        )&#10;                    ) {&#10;                        Text(&quot;Volver&quot;)&#10;                    }&#10;                }&#10;            } else {&#10;                /**&#10;                 * Muestra el botón si showText es false.&#10;                 * El botón tiene color azul marino y texto blanco.&#10;                 * Al presionarlo, muestra el saludo y un snackbar.&#10;                 *&#10;                 * @see showText Estado que controla la visibilidad del saludo y el botón.&#10;                 * @see snackbarHostState Estado para mostrar el mensaje snackbar.&#10;                 */&#10;                Button(&#10;                    onClick = {&#10;                        showText = true&#10;                        scope.launch {&#10;                            snackbarHostState.showSnackbar(&quot;¡Hola desde el botón!&quot;)&#10;                        }&#10;                    },&#10;                    modifier = Modifier.padding(top = 64.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Color(0xFF0D47A1), // Azul marino&#10;                        contentColor = Color.White // Texto blanco&#10;                    )&#10;                ) {&#10;                    Text(&quot;Presiona el botón&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra un mensaje de saludo en pantalla.&#10; *&#10; * @param name Nombre de la persona a saludar.&#10; * @param modifier Modificador para aplicar estilos o comportamientos al componente.&#10; */&#10;@Composable&#10;fun Greeting(&#10;    name: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Text(&#10;        text = &quot;\n¡Hola, soy $name y este es mi lab #2!\n\n&quot; +&#10;               &quot;En este lab se muestra un botón que, al ser presionado, da un saludo y un snackbar para volver al estado inicial.&quot;,&#10;        modifier = modifier&#10;            .padding(horizontal = 24.dp, vertical = 16.dp), // Más espacio alrededor del texto&#10;        color = Color.Black,&#10;        fontSize = MaterialTheme.typography.titleMedium.fontSize, // Fuente más grande&#10;        lineHeight = 28.sp // Más espacio entre líneas&#10;    )&#10;}&#10;&#10;/**&#10; * Composable para previsualizar la interfaz en el editor de Android Studio.&#10; * Permite ver cómo se verá la pantalla sin ejecutar la app.&#10; */&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    Lab2Theme {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Cyan)&#10;        ) {&#10;            AppContent()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>