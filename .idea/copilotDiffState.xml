<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/lab2/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/lab2/MainActivity.kt" />
              <option name="originalContent" value="package com.example.lab2 // Define el paquete donde se encuentra este archivo&#10;&#10;// Importaciones necesarias para la actividad y componentes de Jetpack Compose&#10;import android.os.Bundle // Proporciona la clase Bundle para pasar datos entre actividades&#10;import androidx.activity.ComponentActivity // Clase base para actividades que usan Compose&#10;import androidx.activity.compose.setContent // Permite definir el contenido de la actividad usando Compose&#10;import androidx.activity.enableEdgeToEdge // Habilita el modo edge-to-edge en la actividad&#10;import androidx.compose.foundation.background // Permite establecer un color de fondo&#10;import androidx.compose.foundation.layout.* // Proporciona modificadores de layout como Box, Column, Spacer, etc.&#10;import androidx.compose.material3.* // Proporciona componentes de Material3 como Button, Text, Scaffold, etc.&#10;import androidx.compose.runtime.* // Proporciona funciones y clases para manejar estados en Compose&#10;import androidx.compose.ui.Alignment // Permite alinear elementos dentro de layouts&#10;import androidx.compose.ui.Modifier // Permite modificar el comportamiento y apariencia de los componentes&#10;import androidx.compose.ui.graphics.Color // Permite trabajar con colores&#10;import androidx.compose.ui.tooling.preview.Preview // Permite previsualizar composables en el editor&#10;import androidx.compose.ui.unit.dp // Permite usar la unidad dp para medidas como padding&#10;import com.example.lab2.ui.theme.Lab2Theme // Importa el tema personalizado de la aplicación&#10;import kotlinx.coroutines.launch // Permite lanzar corutinas para tareas asíncronas&#10;&#10;/**&#10; * Actividad principal de la aplicación.&#10; * Hereda de ComponentActivity para usar Jetpack Compose.&#10; */&#10;class MainActivity : ComponentActivity() {&#10;    /**&#10;     * Método que se llama cuando la actividad es creada.&#10;     * @param savedInstanceState Estado guardado de la actividad (si existe).&#10;     */&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState) // Llama al método de la clase padre&#10;        enableEdgeToEdge() // Habilita el modo edge-to-edge para la interfaz&#10;        setContent { // Define el contenido de la actividad usando Compose&#10;            Lab2Theme { // Aplica el tema personalizado a la interfaz&#10;                AppContent() // Llama al composable principal que contiene la UI&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra la pantalla principal de la aplicación.&#10; * Presenta un botón centrado en la parte superior y, al presionarlo, muestra un saludo en el mismo lugar.&#10; * También despliega un mensaje tipo snackbar cuando el botón es presionado.&#10; */&#10;@Composable&#10;fun AppContent() {&#10;    val snackbarHostState = remember { SnackbarHostState() } // Estado para mostrar mensajes tipo snackbar&#10;    val scope = rememberCoroutineScope() // Permite lanzar corutinas desde Compose&#10;    var showText by remember { mutableStateOf(false) } // Estado para mostrar el texto de saludo&#10;&#10;    // Box que cubre toda la pantalla y aplica el fondo celeste&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize() // Ocupa todo el espacio disponible&#10;            .background(Color.Cyan) // Aplica color de fondo celeste&#10;    ) {&#10;        // Scaffold organiza la estructura visual y permite mostrar snackbars&#10;        Scaffold(&#10;            snackbarHost = { SnackbarHost(snackbarHostState) }, // Host para mostrar mensajes snackbar&#10;        ) { innerPadding -&gt;&#10;            // Box centrado en la parte superior para mostrar el botón o el saludo&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(innerPadding) // Aplica el padding interno del Scaffold&#10;                    .fillMaxSize(), // Ocupa todo el espacio disponible&#10;                contentAlignment = Alignment.TopCenter // Centra el contenido en la parte superior&#10;            ) {&#10;                if (showText) {&#10;                    // Si showText es true, muestra el saludo&#10;                    Greeting(&#10;                        name = &quot;Jose&quot;, // Nombre que se mostrará en el saludo&#10;                        modifier = Modifier&#10;                            .padding(top = 64.dp) // Separa el saludo de la parte superior&#10;                    )&#10;                } else {&#10;                    // Si showText es false, muestra el botón&#10;                    Button(&#10;                        onClick = {&#10;                            showText = true // Cambia el estado para mostrar el saludo&#10;                            scope.launch {&#10;                                snackbarHostState.showSnackbar(&quot;¡Hola desde el botón!&quot;) // Muestra un mensaje snackbar&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .padding(top = 64.dp) // Separa el botón de la parte superior&#10;                    ) {&#10;                        Text(&quot;Aprime el botón &quot;) // Texto del botón que se muestra en pantalla&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra un mensaje de saludo en pantalla.&#10; * @param name Nombre de la persona a saludar.&#10; * @param modifier Modificador para aplicar estilos o comportamientos al componente.&#10; */&#10;@Composable&#10;fun Greeting(&#10;    name: String, // Nombre que se mostrará en el saludo&#10;    modifier: Modifier = Modifier // Modificador opcional para el componente&#10;) {&#10;    Text( // Componente que muestra texto en pantalla&#10;        text = &quot;Hello $name!&quot;, // Texto que se mostrará, incluyendo el nombre recibido&#10;        modifier = modifier // Aplica el modificador recibido como parámetro&#10;    )&#10;}&#10;&#10;/**&#10; * Composable para previsualizar la interfaz en el editor de Android Studio.&#10; * Permite ver cómo se verá la pantalla sin ejecutar la app.&#10; */&#10;@Preview(showBackground = true) // Indica que se debe mostrar el fondo en la previsualización&#10;@Composable&#10;fun GreetingPreview() {&#10;    Lab2Theme { // Aplica el tema personalizado en la previsualización&#10;        AppContent() // Muestra el contenido principal de la app&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.lab2 // Define el paquete donde se encuentra este archivo&#10;&#10;// Importaciones necesarias para la actividad y componentes de Jetpack Compose&#10;import android.os.Bundle // Proporciona la clase Bundle para pasar datos entre actividades&#10;import androidx.activity.ComponentActivity // Clase base para actividades que usan Compose&#10;import androidx.activity.compose.setContent // Permite definir el contenido de la actividad usando Compose&#10;import androidx.activity.enableEdgeToEdge // Habilita el modo edge-to-edge en la actividad&#10;import androidx.compose.foundation.background // Permite establecer un color de fondo&#10;import androidx.compose.foundation.layout.* // Proporciona modificadores de layout como Box, Column, Spacer, etc.&#10;import androidx.compose.material3.* // Proporciona componentes de Material3 como Button, Text, Scaffold, etc.&#10;import androidx.compose.runtime.* // Proporciona funciones y clases para manejar estados en Compose&#10;import androidx.compose.ui.Alignment // Permite alinear elementos dentro de layouts&#10;import androidx.compose.ui.Modifier // Permite modificar el comportamiento y apariencia de los componentes&#10;import androidx.compose.ui.graphics.Color // Permite trabajar con colores&#10;import androidx.compose.ui.tooling.preview.Preview // Permite previsualizar composables en el editor&#10;import androidx.compose.ui.unit.dp // Permite usar la unidad dp para medidas como padding&#10;import com.example.lab2.ui.theme.Lab2Theme // Importa el tema personalizado de la aplicación&#10;import kotlinx.coroutines.launch // Permite lanzar corutinas para tareas asíncronas&#10;&#10;/**&#10; * Actividad principal de la aplicación.&#10; * Hereda de ComponentActivity para usar Jetpack Compose.&#10; */&#10;class MainActivity : ComponentActivity() {&#10;    /**&#10;     * Método que se llama cuando la actividad es creada.&#10;     * @param savedInstanceState Estado guardado de la actividad (si existe).&#10;     */&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState) // Llama al método de la clase padre&#10;        enableEdgeToEdge() // Habilita el modo edge-to-edge para la interfaz&#10;        setContent { // Define el contenido de la actividad usando Compose&#10;            Lab2Theme { // Aplica el tema personalizado a la interfaz&#10;                AppContent() // Llama al composable principal que contiene la UI&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra la pantalla principal de la aplicación.&#10; *&#10; * Presenta un botón centrado en la parte superior. Al presionarlo, el botón es reemplazado por un saludo&#10; * en la misma posición y se muestra un mensaje tipo snackbar.&#10; *&#10; * Variables internas:&#10; * - snackbarHostState: Estado para mostrar mensajes snackbar.&#10; * - scope: Corutina para lanzar tareas asíncronas.&#10; * - showText: Estado booleano que determina si se muestra el saludo o el botón.&#10; *&#10; * No recibe parámetros.&#10; */&#10;@Composable&#10;fun AppContent() {&#10;    val snackbarHostState = remember { SnackbarHostState() } // Estado para mostrar mensajes snackbar&#10;    val scope = rememberCoroutineScope() // Permite lanzar corutinas desde Compose&#10;    var showText by remember { mutableStateOf(false) } // Estado para mostrar el saludo&#10;&#10;    // Box que cubre toda la pantalla y aplica el fondo celeste&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize() // Ocupa todo el espacio disponible&#10;            .background(Color.Cyan) // Aplica color de fondo celeste&#10;    ) {&#10;        // Scaffold organiza la estructura visual y permite mostrar snackbars&#10;        Scaffold(&#10;            snackbarHost = { SnackbarHost(snackbarHostState) }, // Host para mostrar mensajes snackbar&#10;        ) { innerPadding -&gt;&#10;            // Box centrado en la parte superior para mostrar el botón o el saludo&#10;            Box(&#10;                modifier = Modifier&#10;                    .padding(innerPadding) // Aplica el padding interno del Scaffold&#10;                    .fillMaxSize(), // Ocupa todo el espacio disponible&#10;                contentAlignment = Alignment.TopCenter // Centra el contenido en la parte superior&#10;            ) {&#10;                if (showText) {&#10;                    // Si showText es true, muestra el saludo&#10;                    Greeting(&#10;                        name = &quot;Jose&quot;, // Nombre que se mostrará en el saludo&#10;                        modifier = Modifier&#10;                            .padding(top = 64.dp) // Separa el saludo de la parte superior&#10;                    )&#10;                } else {&#10;                    // Si showText es false, muestra el botón&#10;                    Button(&#10;                        onClick = {&#10;                            showText = true // Cambia el estado para mostrar el saludo&#10;                            scope.launch {&#10;                                snackbarHostState.showSnackbar(&quot;¡Hola desde el botón!&quot;) // Muestra un mensaje snackbar&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .padding(top = 64.dp) // Separa el botón de la parte superior&#10;                    ) {&#10;                        Text(&quot;Aprime el botón &quot;) // Texto del botón que se muestra en pantalla&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Composable que muestra un mensaje de saludo en pantalla.&#10; * @param name Nombre de la persona a saludar.&#10; * @param modifier Modificador para aplicar estilos o comportamientos al componente.&#10; */&#10;@Composable&#10;fun Greeting(&#10;    name: String, // Nombre que se mostrará en el saludo&#10;    modifier: Modifier = Modifier // Modificador opcional para el componente&#10;) {&#10;    Text( // Componente que muestra texto en pantalla&#10;        text = &quot;Hello $name!&quot;, // Texto que se mostrará, incluyendo el nombre recibido&#10;        modifier = modifier // Aplica el modificador recibido como parámetro&#10;    )&#10;}&#10;&#10;/**&#10; * Composable para previsualizar la interfaz en el editor de Android Studio.&#10; * Permite ver cómo se verá la pantalla sin ejecutar la app.&#10; */&#10;@Preview(showBackground = true) // Indica que se debe mostrar el fondo en la previsualización&#10;@Composable&#10;fun GreetingPreview() {&#10;    Lab2Theme { // Aplica el tema personalizado en la previsualización&#10;        AppContent() // Muestra el contenido principal de la app&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>